# ===========================================================
# CI/CD PIPELINE - DEVOPS TECHNICAL TEST
# Autor: Miguel Mej√≠a
# Objetivo: Compilar, probar, analizar, construir imagen Docker,
#            publicarla en Docker Hub y desplegar en Kubernetes.
# ===========================================================

name: CI-CD Pipeline

# ===========================================================
# 1Ô∏è‚É£ - Disparadores del pipeline
# ===========================================================
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Permite ejecutarlo manualmente desde GitHub Actions UI

# ===========================================================
# 2Ô∏è‚É£ - Variables globales
# ===========================================================
env:
  IMAGE_NAME: demo-devops-java
  REGISTRY: docker.io/${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}

# ===========================================================
# 3Ô∏è‚É£ - JOB: Compilaci√≥n, pruebas y an√°lisis est√°tico
# ===========================================================
jobs:
  build-test:
    name: üß™ Build & Unit Tests
    runs-on: ubuntu-latest

    steps:
      # 3.1 - Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3.2 - Configurar Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'

      # 3.3 - Compilar y ejecutar pruebas unitarias
      - name: Build and test project
        run: mvn -B -q clean verify

      # 3.4 - Publicar reportes (JUnit + Jacoco + SpotBugs)
      - name: Upload test & coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: junit-and-jacoco
          path: |
            target/surefire-reports
            target/site/jacoco

      - name: Upload SpotBugs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs
          path: target/spotbugs

  # ===========================================================
  # 4Ô∏è‚É£ - JOB: Construcci√≥n y publicaci√≥n de imagen Docker
  # ===========================================================
  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-test   # Espera a que termine el job anterior

    steps:
      # 4.1 - Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 4.2 - Iniciar sesi√≥n en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4.3 - Construir y publicar imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 4.4 - Escaneo opcional de vulnerabilidades
      - name: Trivy image scan (optional)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'   # no falla el job por vulnerabilidades
          vuln-type: 'os,library'

  # ===========================================================
  # 5Ô∏è‚É£ - JOB: Despliegue autom√°tico en Kubernetes
  # ===========================================================
  deploy:
    name: üöÄ Deploy to Kubernetes
    runs-on: self-hosted   # Requiere un runner configurado localmente
    needs: docker

    env:
      REGISTRY: docker.io/${{ secrets.DOCKER_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 5.1 - Actualizar el deployment con la imagen reci√©n publicada
      - name: Update deployment image tag
        run: |
          sed -i "s#<TU_REGISTRO>/demo-devops-java:\${IMAGE_TAG}#${REGISTRY}/demo-devops-java:${IMAGE_TAG}#g" k8s/deployment.yaml

      # 5.2 - Aplicar manifiestos en Kubernetes
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl -n demo apply -f k8s/configmap.yaml -f k8s/secret.yaml -f k8s/deployment.yaml -f k8s/service.yaml -f k8s/ingress.yaml
          kubectl -n demo rollout status deploy/demo-app --timeout=120s

      # 5.3 - Mostrar el estado final del despliegue
      - name: Show deployment resources
        run: |
          kubectl -n demo get all