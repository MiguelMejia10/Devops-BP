name: CI-CD (K8s & Heroku)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "DÃ³nde desplegar (k8s o heroku)"
        required: true
        default: "heroku"
        type: choice
        options: [k8s, heroku]
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: demo-devops-java
  REGISTRY: docker.io/${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ---------- 1) Build & Test ----------
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: "maven"

      - name: Build & Unit Tests (skip checkstyle)
        run: mvn -B -q clean verify -Dcheckstyle.skip=true

      - name: Upload test & coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: junit-and-jacoco
          path: |
            target/surefire-reports
            target/site/jacoco

  # ---------- 2) Docker Build & Push ----------
  docker:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push multi-arch image (amd64+arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # ---------- 3) Deploy to Kubernetes (local/self-hosted) ----------
  deploy_k8s:
    needs: docker
    if: ${{ github.event.inputs.target == 'k8s' || github.event_name == 'push' }}
    runs-on: self-hosted
    env:
      REGISTRY: docker.io/${{ secrets.DOCKER_USERNAME }}
      IMAGE_NAME: demo-devops-java
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Show kubectl context (debug)
        run: |
          kubectl config current-context
          kubectl get nodes

      - name: Ensure namespace & ingress addon (idempotent)
        run: |
          kubectl get ns demo || kubectl create ns demo
          # minikube addons enable ingress || true

      - name: Render image into deployment
        run: |
          sed -i.bak "s#<TU_REGISTRO>/demo-devops-java:${IMAGE_TAG}#${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}#g" k8s/deployment.yaml

      - name: Apply manifests
        run: |
          kubectl -n demo apply -f k8s/configmap.yaml || true
          kubectl -n demo apply -f k8s/secret.yaml || true
          kubectl -n demo apply -f k8s/service.yaml
          kubectl -n demo apply -f k8s/deployment.yaml
          kubectl -n demo apply -f k8s/ingress.yaml || true

      - name: Set image on deployment
        run: |
          kubectl -n demo set image deployment/demo-app app=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}

      - name: Wait for rollout
        run: kubectl -n demo rollout status deploy/demo-app --timeout=180s

      - name: Show resources
        run: kubectl -n demo get all

  # ---------- 4) Deploy to Heroku (Container Registry) ----------
  deploy_heroku:
    needs: docker
    if: ${{ github.event.inputs.target == 'heroku' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build & push image to Heroku
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          docker build -t registry.heroku.com/$HEROKU_APP_NAME/web .
          docker push registry.heroku.com/$HEROKU_APP_NAME/web

      - name: Release new version
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: heroku container:release web --app $HEROKU_APP_NAME